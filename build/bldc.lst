ARM GAS  /tmp/cc18IvJC.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"bldc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.BLDC_IsZeroCross,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	BLDC_IsZeroCross:
  23              	.LFB66:
  24              		.file 1 "BLDC/bldc.c"
   1:BLDC/bldc.c   **** #include <stdbool.h>
   2:BLDC/bldc.c   **** 
   3:BLDC/bldc.c   **** #include "bldc.h"
   4:BLDC/bldc.c   **** #include "stm32f1_easyco.h"
   5:BLDC/bldc.c   **** #include "bsp_adc.h"
   6:BLDC/bldc.c   **** #include "bsp_tim.h"
   7:BLDC/bldc.c   **** #include "system.h"
   8:BLDC/bldc.c   **** #include "comm.h"
   9:BLDC/bldc.c   **** #include "pwm.h"
  10:BLDC/bldc.c   **** #include "adc.h"
  11:BLDC/bldc.c   **** 
  12:BLDC/bldc.c   **** BldcStatus_t Bldc;
  13:BLDC/bldc.c   **** static volatile uint32_t zTime;
  14:BLDC/bldc.c   **** static volatile uint16_t bRef;
  15:BLDC/bldc.c   **** static volatile uint16_t bemf;
  16:BLDC/bldc.c   **** 
  17:BLDC/bldc.c   **** const uint8_t BemfDirTable[2][6] = { 
  18:BLDC/bldc.c   **** 	{ BEMF_DOWN, BEMF_UP, BEMF_DOWN, BEMF_UP, BEMF_DOWN, BEMF_UP },		// CW
  19:BLDC/bldc.c   **** 	{ BEMF_UP, BEMF_DOWN, BEMF_UP, BEMF_DOWN, BEMF_UP, BEMF_DOWN } };   // CCW
  20:BLDC/bldc.c   **** 
  21:BLDC/bldc.c   **** const MotorPhase_t NextPhaseTable[2][6] = {
  22:BLDC/bldc.c   **** 	{ MOTOR_PHASE_1, MOTOR_PHASE_2, MOTOR_PHASE_3, MOTOR_PHASE_4, MOTOR_PHASE_5, MOTOR_PHASE_0 },	// C
  23:BLDC/bldc.c   **** 	{ MOTOR_PHASE_5, MOTOR_PHASE_0, MOTOR_PHASE_1, MOTOR_PHASE_2, MOTOR_PHASE_3, MOTOR_PHASE_4 } }; //
  24:BLDC/bldc.c   **** 
  25:BLDC/bldc.c   **** const uint8_t BemfAdcIndexTable[6] = { 2,1,0,2,1,0 };
  26:BLDC/bldc.c   **** const uint8_t RefAdcIndex = 3;
  27:BLDC/bldc.c   **** 
  28:BLDC/bldc.c   **** extern void BLDC_SetPwmDuty(uint16_t duty);
  29:BLDC/bldc.c   **** extern void BLDC_CommPWM(uint8_t phase);
  30:BLDC/bldc.c   **** extern bool Button_IsPush(void);
  31:BLDC/bldc.c   **** 
  32:BLDC/bldc.c   **** static bool BLDC_IsZeroCross(void)
  33:BLDC/bldc.c   **** {
  25              		.loc 1 33 0
ARM GAS  /tmp/cc18IvJC.s 			page 2


  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  34:BLDC/bldc.c   **** #if (BEMF_REF_MODE == BEMF_REF_MODE_SAMPLE_ALL)
  35:BLDC/bldc.c   **** 	bRef = (Bldc.AdcBuffer[0] + Bldc.AdcBuffer[1] + Bldc.AdcBuffer[2]) / 3;
  30              		.loc 1 35 0
  31 0000 1E4A     		ldr	r2, .L7
  32 0002 5389     		ldrh	r3, [r2, #10]
  33 0004 9189     		ldrh	r1, [r2, #12]
  34 0006 0B44     		add	r3, r3, r1
  35 0008 D189     		ldrh	r1, [r2, #14]
  36 000a 0B44     		add	r3, r3, r1
  37 000c 1C49     		ldr	r1, .L7+4
  38 000e 81FB0313 		smull	r1, r3, r1, r3
  39 0012 9BB2     		uxth	r3, r3
  40 0014 1B49     		ldr	r1, .L7+8
  41 0016 0B80     		strh	r3, [r1]	@ movhi
  36:BLDC/bldc.c   **** #elif (BEMF_REF_MODE == BEMF_REF_MODE_MID_POINT)
  37:BLDC/bldc.c   **** 	bRef = Bldc.AdcBuffer[RefAdcIndex];
  38:BLDC/bldc.c   **** #endif
  39:BLDC/bldc.c   **** 	if (BemfDirTable[Bldc.MotorRunDir][Bldc.MotorPhase] == BEMF_DOWN)
  42              		.loc 1 39 0
  43 0018 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
  44 001a 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
  45 001c 03EB4303 		add	r3, r3, r3, lsl #1
  46 0020 5900     		lsls	r1, r3, #1
  47 0022 194B     		ldr	r3, .L7+12
  48 0024 0B44     		add	r3, r3, r1
  49 0026 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
  50 0028 012B     		cmp	r3, #1
  51 002a 11D0     		beq	.L6
  40:BLDC/bldc.c   **** 	{
  41:BLDC/bldc.c   **** 		if (Bldc.AdcBuffer[BemfAdcIndexTable[Bldc.MotorPhase]] < bRef)
  42:BLDC/bldc.c   **** 		{
  43:BLDC/bldc.c   **** 			LED7_On();
  44:BLDC/bldc.c   **** 			return true;
  45:BLDC/bldc.c   **** 		}
  46:BLDC/bldc.c   **** 		else
  47:BLDC/bldc.c   **** 			return false;
  48:BLDC/bldc.c   **** 	}
  49:BLDC/bldc.c   **** 	else
  50:BLDC/bldc.c   **** 	{
  51:BLDC/bldc.c   **** 		if (Bldc.AdcBuffer[BemfAdcIndexTable[Bldc.MotorPhase]] > bRef)
  52              		.loc 1 51 0
  53 002c 174B     		ldr	r3, .L7+16
  54 002e 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
  55 0030 1A1D     		adds	r2, r3, #4
  56 0032 124B     		ldr	r3, .L7
  57 0034 03EB4203 		add	r3, r3, r2, lsl #1
  58 0038 5A88     		ldrh	r2, [r3, #2]
  59 003a 124B     		ldr	r3, .L7+8
  60 003c 1B88     		ldrh	r3, [r3]
  61 003e 9BB2     		uxth	r3, r3
  62 0040 9A42     		cmp	r2, r3
  63 0042 18D9     		bls	.L5
  52:BLDC/bldc.c   **** 		{
ARM GAS  /tmp/cc18IvJC.s 			page 3


  53:BLDC/bldc.c   **** 			LED7_Off();
  64              		.loc 1 53 0
  65 0044 124B     		ldr	r3, .L7+20
  66 0046 4FF40022 		mov	r2, #524288
  67 004a 1A61     		str	r2, [r3, #16]
  54:BLDC/bldc.c   **** 			return true;
  68              		.loc 1 54 0
  69 004c 0120     		movs	r0, #1
  70 004e 7047     		bx	lr
  71              	.L6:
  41:BLDC/bldc.c   **** 		{
  72              		.loc 1 41 0
  73 0050 0E4B     		ldr	r3, .L7+16
  74 0052 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
  75 0054 1A1D     		adds	r2, r3, #4
  76 0056 094B     		ldr	r3, .L7
  77 0058 03EB4203 		add	r3, r3, r2, lsl #1
  78 005c 5A88     		ldrh	r2, [r3, #2]
  79 005e 094B     		ldr	r3, .L7+8
  80 0060 1B88     		ldrh	r3, [r3]
  81 0062 9BB2     		uxth	r3, r3
  82 0064 9A42     		cmp	r2, r3
  83 0066 04D2     		bcs	.L4
  43:BLDC/bldc.c   **** 			return true;
  84              		.loc 1 43 0
  85 0068 094B     		ldr	r3, .L7+20
  86 006a 0822     		movs	r2, #8
  87 006c 1A61     		str	r2, [r3, #16]
  44:BLDC/bldc.c   **** 		}
  88              		.loc 1 44 0
  89 006e 0120     		movs	r0, #1
  90 0070 7047     		bx	lr
  91              	.L4:
  47:BLDC/bldc.c   **** 	}
  92              		.loc 1 47 0
  93 0072 0020     		movs	r0, #0
  94 0074 7047     		bx	lr
  95              	.L5:
  55:BLDC/bldc.c   **** 		}
  56:BLDC/bldc.c   **** 		else
  57:BLDC/bldc.c   **** 			return false;
  96              		.loc 1 57 0
  97 0076 0020     		movs	r0, #0
  58:BLDC/bldc.c   **** 	}
  59:BLDC/bldc.c   **** }
  98              		.loc 1 59 0
  99 0078 7047     		bx	lr
 100              	.L8:
 101 007a 00BF     		.align	2
 102              	.L7:
 103 007c 00000000 		.word	Bldc
 104 0080 56555555 		.word	1431655766
 105 0084 00000000 		.word	.LANCHOR0
 106 0088 00000000 		.word	.LANCHOR1
 107 008c 00000000 		.word	.LANCHOR2
 108 0090 000C0140 		.word	1073810432
 109              		.cfi_endproc
ARM GAS  /tmp/cc18IvJC.s 			page 4


 110              	.LFE66:
 112              		.section	.text.BLDC_CommCallback,"ax",%progbits
 113              		.align	1
 114              		.global	BLDC_CommCallback
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu softvfp
 120              	BLDC_CommCallback:
 121              	.LFB67:
  60:BLDC/bldc.c   **** 
  61:BLDC/bldc.c   **** /* 换向中断回调函数
  62:BLDC/bldc.c   **** *  该函数只有在电机运行状态执行；
  63:BLDC/bldc.c   **** */
  64:BLDC/bldc.c   **** void BLDC_CommCallback(void)
  65:BLDC/bldc.c   **** {
 122              		.loc 1 65 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126 0000 10B5     		push	{r4, lr}
 127              	.LCFI0:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 4, -8
 130              		.cfi_offset 14, -4
  66:BLDC/bldc.c   **** 	//uint16_t speedSet;
  67:BLDC/bldc.c   **** 	//speedSet = Bldc.AdcBuffer[3]
  68:BLDC/bldc.c   **** 
  69:BLDC/bldc.c   **** 	Bldc.MotorPhase = NextPhaseTable[Bldc.MotorRunDir][Bldc.MotorPhase];
 131              		.loc 1 69 0
 132 0002 0C4C     		ldr	r4, .L11
 133 0004 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 134 0006 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 135 0008 03EB4303 		add	r3, r3, r3, lsl #1
 136 000c 5A00     		lsls	r2, r3, #1
 137 000e 0A4B     		ldr	r3, .L11+4
 138 0010 1344     		add	r3, r3, r2
 139 0012 585C     		ldrb	r0, [r3, r1]	@ zero_extendqisi2
 140 0014 A070     		strb	r0, [r4, #2]
  70:BLDC/bldc.c   **** 	BLDC_CommPWM(Bldc.MotorPhase);
 141              		.loc 1 70 0
 142 0016 FFF7FEFF 		bl	BLDC_CommPWM
 143              	.LVL0:
  71:BLDC/bldc.c   **** 
  72:BLDC/bldc.c   **** 	Bldc.FlagZeroCross = false;
 144              		.loc 1 72 0
 145 001a 0023     		movs	r3, #0
 146 001c 84F82630 		strb	r3, [r4, #38]
  73:BLDC/bldc.c   **** 	Bldc.ZeroCrossCnt = 0;
 147              		.loc 1 73 0
 148 0020 84F82430 		strb	r3, [r4, #36]
  74:BLDC/bldc.c   **** 	Bldc.DemagnCnt = 2;
 149              		.loc 1 74 0
 150 0024 0223     		movs	r3, #2
 151 0026 84F82530 		strb	r3, [r4, #37]
  75:BLDC/bldc.c   **** 	
  76:BLDC/bldc.c   **** 	BLDC_StopAutoComm();
ARM GAS  /tmp/cc18IvJC.s 			page 5


 152              		.loc 1 76 0
 153 002a FFF7FEFF 		bl	BLDC_StopAutoComm
 154              	.LVL1:
  77:BLDC/bldc.c   **** 	BLDC_StartAdc();
 155              		.loc 1 77 0
 156 002e FFF7FEFF 		bl	BLDC_StartAdc
 157              	.LVL2:
  78:BLDC/bldc.c   **** }
 158              		.loc 1 78 0
 159 0032 10BD     		pop	{r4, pc}
 160              	.L12:
 161              		.align	2
 162              	.L11:
 163 0034 00000000 		.word	Bldc
 164 0038 00000000 		.word	.LANCHOR3
 165              		.cfi_endproc
 166              	.LFE67:
 168              		.section	.text.BLDC_CheckZeroCrossCallback,"ax",%progbits
 169              		.align	1
 170              		.global	BLDC_CheckZeroCrossCallback
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 174              		.fpu softvfp
 176              	BLDC_CheckZeroCrossCallback:
 177              	.LFB68:
  79:BLDC/bldc.c   **** 
  80:BLDC/bldc.c   **** /* 过零检测回调函数
  81:BLDC/bldc.c   **** *  该函数在DMA传输结束中断中调用；
  82:BLDC/bldc.c   **** */
  83:BLDC/bldc.c   **** void BLDC_CheckZeroCrossCallback(void)
  84:BLDC/bldc.c   **** {
 178              		.loc 1 84 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182 0000 38B5     		push	{r3, r4, r5, lr}
 183              	.LCFI1:
 184              		.cfi_def_cfa_offset 16
 185              		.cfi_offset 3, -16
 186              		.cfi_offset 4, -12
 187              		.cfi_offset 5, -8
 188              		.cfi_offset 14, -4
  85:BLDC/bldc.c   **** 	/* 如果已经检测到过零事件，等待换向 */
  86:BLDC/bldc.c   **** 	if (Bldc.FlagZeroCross == true)	return;
 189              		.loc 1 86 0
 190 0002 324B     		ldr	r3, .L23
 191 0004 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 192 0008 002B     		cmp	r3, #0
 193 000a 2FD1     		bne	.L13
  87:BLDC/bldc.c   **** 	/* 等待消磁 */
  88:BLDC/bldc.c   **** 	if (Bldc.DemagnCnt > 0)
 194              		.loc 1 88 0
 195 000c 2F4B     		ldr	r3, .L23
 196 000e 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 197 0012 3BBB     		cbnz	r3, .L21
  89:BLDC/bldc.c   **** 	{
ARM GAS  /tmp/cc18IvJC.s 			page 6


  90:BLDC/bldc.c   **** 		Bldc.DemagnCnt--;
  91:BLDC/bldc.c   **** 		return;
  92:BLDC/bldc.c   **** 	}
  93:BLDC/bldc.c   **** 
  94:BLDC/bldc.c   **** 	zTime = ZCNT_TIM->CNT;
 198              		.loc 1 94 0
 199 0014 2E4B     		ldr	r3, .L23+4
 200 0016 5A6A     		ldr	r2, [r3, #36]
 201 0018 2E4B     		ldr	r3, .L23+8
 202 001a 1A60     		str	r2, [r3]
  95:BLDC/bldc.c   **** 	if (Bldc.ZeroCrossCnt == 0) Bldc.ZeroCrossFirstTime = zTime;
 203              		.loc 1 95 0
 204 001c 2B4B     		ldr	r3, .L23
 205 001e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 206 0022 1BB9     		cbnz	r3, .L16
 207              		.loc 1 95 0 is_stmt 0 discriminator 1
 208 0024 2B4B     		ldr	r3, .L23+8
 209 0026 1A68     		ldr	r2, [r3]
 210 0028 284B     		ldr	r3, .L23
 211 002a 5A84     		strh	r2, [r3, #34]	@ movhi
 212              	.L16:
  96:BLDC/bldc.c   **** 	
  97:BLDC/bldc.c   **** 	if (BLDC_IsZeroCross() == true) Bldc.ZeroCrossCnt++;
 213              		.loc 1 97 0 is_stmt 1
 214 002c FFF7FEFF 		bl	BLDC_IsZeroCross
 215              	.LVL3:
 216 0030 E8B1     		cbz	r0, .L17
 217              		.loc 1 97 0 is_stmt 0 discriminator 1
 218 0032 264A     		ldr	r2, .L23
 219 0034 92F82430 		ldrb	r3, [r2, #36]	@ zero_extendqisi2
 220 0038 0133     		adds	r3, r3, #1
 221 003a 82F82430 		strb	r3, [r2, #36]
 222              	.L18:
  98:BLDC/bldc.c   **** 	else Bldc.ZeroCrossCnt = 0;
  99:BLDC/bldc.c   **** 	
 100:BLDC/bldc.c   **** 	if (Bldc.ZeroCrossCnt >= ZERO_CROSS_CHECK_NUM)
 223              		.loc 1 100 0 is_stmt 1
 224 003e 234B     		ldr	r3, .L23
 225 0040 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 226 0044 012B     		cmp	r3, #1
 227 0046 17D8     		bhi	.L22
 228              	.L19:
 101:BLDC/bldc.c   **** 	{
 102:BLDC/bldc.c   **** 		ZCNT_TIM->CNT = 0;
 103:BLDC/bldc.c   **** 		Bldc.CommPeriod = zTime;
 104:BLDC/bldc.c   **** 		zTime -= (zTime - Bldc.ZeroCrossFirstTime);
 105:BLDC/bldc.c   **** 		zTime >>= 1;
 106:BLDC/bldc.c   **** 		BLDC_UpdateCommPeriod(zTime);
 107:BLDC/bldc.c   **** 		BLDC_StartAutoComm();
 108:BLDC/bldc.c   **** 		BLDC_StopAdc();
 109:BLDC/bldc.c   **** 		Bldc.CommPeriod += zTime;
 110:BLDC/bldc.c   **** 		Bldc.FlagZeroCross = true;
 111:BLDC/bldc.c   **** 		LED9_Toggle();
 112:BLDC/bldc.c   **** 		ADC1->CR2 |= ADC_CR2_JSWSTART;
 113:BLDC/bldc.c   **** 	}
 114:BLDC/bldc.c   **** 	
 115:BLDC/bldc.c   **** 	if (ZCNT_TIM->CNT > 60000)
ARM GAS  /tmp/cc18IvJC.s 			page 7


 229              		.loc 1 115 0
 230 0048 214B     		ldr	r3, .L23+4
 231 004a 5A6A     		ldr	r2, [r3, #36]
 232 004c 4EF66023 		movw	r3, #60000
 233 0050 9A42     		cmp	r2, r3
 234 0052 0BD9     		bls	.L13
 116:BLDC/bldc.c   **** 	{
 117:BLDC/bldc.c   **** 		if (Bldc.MotorStatus == MOTOR_STATUS_START) 
 235              		.loc 1 117 0
 236 0054 1D4B     		ldr	r3, .L23
 237 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 238 0058 022B     		cmp	r3, #2
 239 005a 07D1     		bne	.L13
 118:BLDC/bldc.c   **** 			Bldc.MotorStatus = MOTOR_STATUS_RESTART;
 240              		.loc 1 118 0
 241 005c 1B4B     		ldr	r3, .L23
 242 005e 0322     		movs	r2, #3
 243 0060 1A70     		strb	r2, [r3]
 244 0062 03E0     		b	.L13
 245              	.L21:
  90:BLDC/bldc.c   **** 		return;
 246              		.loc 1 90 0
 247 0064 013B     		subs	r3, r3, #1
 248 0066 194A     		ldr	r2, .L23
 249 0068 82F82530 		strb	r3, [r2, #37]
 250              	.L13:
 119:BLDC/bldc.c   **** 	}
 120:BLDC/bldc.c   **** }
 251              		.loc 1 120 0
 252 006c 38BD     		pop	{r3, r4, r5, pc}
 253              	.L17:
  98:BLDC/bldc.c   **** 	
 254              		.loc 1 98 0
 255 006e 174B     		ldr	r3, .L23
 256 0070 0022     		movs	r2, #0
 257 0072 83F82420 		strb	r2, [r3, #36]
 258 0076 E2E7     		b	.L18
 259              	.L22:
 102:BLDC/bldc.c   **** 		Bldc.CommPeriod = zTime;
 260              		.loc 1 102 0
 261 0078 154B     		ldr	r3, .L23+4
 262 007a 0022     		movs	r2, #0
 263 007c 5A62     		str	r2, [r3, #36]
 103:BLDC/bldc.c   **** 		zTime -= (zTime - Bldc.ZeroCrossFirstTime);
 264              		.loc 1 103 0
 265 007e 154C     		ldr	r4, .L23+8
 266 0080 2368     		ldr	r3, [r4]
 267 0082 124D     		ldr	r5, .L23
 268 0084 2B81     		strh	r3, [r5, #8]	@ movhi
 104:BLDC/bldc.c   **** 		zTime >>= 1;
 269              		.loc 1 104 0
 270 0086 2368     		ldr	r3, [r4]
 271 0088 6A8C     		ldrh	r2, [r5, #34]
 272 008a 9A1A     		subs	r2, r3, r2
 273 008c 2368     		ldr	r3, [r4]
 274 008e 9B1A     		subs	r3, r3, r2
 275 0090 2360     		str	r3, [r4]
ARM GAS  /tmp/cc18IvJC.s 			page 8


 105:BLDC/bldc.c   **** 		BLDC_UpdateCommPeriod(zTime);
 276              		.loc 1 105 0
 277 0092 2368     		ldr	r3, [r4]
 278 0094 5B08     		lsrs	r3, r3, #1
 279 0096 2360     		str	r3, [r4]
 106:BLDC/bldc.c   **** 		BLDC_StartAutoComm();
 280              		.loc 1 106 0
 281 0098 2068     		ldr	r0, [r4]
 282 009a 80B2     		uxth	r0, r0
 283 009c FFF7FEFF 		bl	BLDC_UpdateCommPeriod
 284              	.LVL4:
 107:BLDC/bldc.c   **** 		BLDC_StopAdc();
 285              		.loc 1 107 0
 286 00a0 FFF7FEFF 		bl	BLDC_StartAutoComm
 287              	.LVL5:
 108:BLDC/bldc.c   **** 		Bldc.CommPeriod += zTime;
 288              		.loc 1 108 0
 289 00a4 FFF7FEFF 		bl	BLDC_StopAdc
 290              	.LVL6:
 109:BLDC/bldc.c   **** 		Bldc.FlagZeroCross = true;
 291              		.loc 1 109 0
 292 00a8 2368     		ldr	r3, [r4]
 293 00aa 2A89     		ldrh	r2, [r5, #8]
 294 00ac 1344     		add	r3, r3, r2
 295 00ae 2B81     		strh	r3, [r5, #8]	@ movhi
 110:BLDC/bldc.c   **** 		LED9_Toggle();
 296              		.loc 1 110 0
 297 00b0 0123     		movs	r3, #1
 298 00b2 85F82630 		strb	r3, [r5, #38]
 111:BLDC/bldc.c   **** 		ADC1->CR2 |= ADC_CR2_JSWSTART;
 299              		.loc 1 111 0
 300 00b6 2021     		movs	r1, #32
 301 00b8 0748     		ldr	r0, .L23+12
 302 00ba FFF7FEFF 		bl	HAL_GPIO_TogglePin
 303              	.LVL7:
 112:BLDC/bldc.c   **** 	}
 304              		.loc 1 112 0
 305 00be 074A     		ldr	r2, .L23+16
 306 00c0 9368     		ldr	r3, [r2, #8]
 307 00c2 43F40013 		orr	r3, r3, #2097152
 308 00c6 9360     		str	r3, [r2, #8]
 309 00c8 BEE7     		b	.L19
 310              	.L24:
 311 00ca 00BF     		.align	2
 312              	.L23:
 313 00cc 00000000 		.word	Bldc
 314 00d0 00080040 		.word	1073743872
 315 00d4 00000000 		.word	.LANCHOR4
 316 00d8 000C0140 		.word	1073810432
 317 00dc 00240140 		.word	1073816576
 318              		.cfi_endproc
 319              	.LFE68:
 321              		.section	.text.BLDC_StartUp,"ax",%progbits
 322              		.align	1
 323              		.global	BLDC_StartUp
 324              		.syntax unified
 325              		.thumb
ARM GAS  /tmp/cc18IvJC.s 			page 9


 326              		.thumb_func
 327              		.fpu softvfp
 329              	BLDC_StartUp:
 330              	.LFB69:
 121:BLDC/bldc.c   **** 
 122:BLDC/bldc.c   **** bool BLDC_StartUp(void)
 123:BLDC/bldc.c   **** {
 331              		.loc 1 123 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335 0000 38B5     		push	{r3, r4, r5, lr}
 336              	.LCFI2:
 337              		.cfi_def_cfa_offset 16
 338              		.cfi_offset 3, -16
 339              		.cfi_offset 4, -12
 340              		.cfi_offset 5, -8
 341              		.cfi_offset 14, -4
 124:BLDC/bldc.c   **** 	static uint16_t n = 0;
 125:BLDC/bldc.c   **** 	
 126:BLDC/bldc.c   **** 	printf("Motor startup ...\r\n");
 342              		.loc 1 126 0
 343 0002 2248     		ldr	r0, .L27
 344 0004 FFF7FEFF 		bl	puts
 345              	.LVL8:
 127:BLDC/bldc.c   **** 	n++;
 346              		.loc 1 127 0
 347 0008 214A     		ldr	r2, .L27+4
 348 000a 1388     		ldrh	r3, [r2]
 349 000c 0133     		adds	r3, r3, #1
 350 000e 1380     		strh	r3, [r2]	@ movhi
 128:BLDC/bldc.c   **** 
 129:BLDC/bldc.c   **** 	Bldc.CommPeriod = MOTOR_START_COMM_PERIOD;
 351              		.loc 1 129 0
 352 0010 204C     		ldr	r4, .L27+8
 353 0012 44F62063 		movw	r3, #20000
 354 0016 2381     		strh	r3, [r4, #8]	@ movhi
 130:BLDC/bldc.c   **** 	Bldc.ZeroCrossCnt = 0;
 355              		.loc 1 130 0
 356 0018 0025     		movs	r5, #0
 357 001a 84F82450 		strb	r5, [r4, #36]
 131:BLDC/bldc.c   **** 	Bldc.FlagZeroCross = false;
 358              		.loc 1 131 0
 359 001e 84F82650 		strb	r5, [r4, #38]
 132:BLDC/bldc.c   **** 	Bldc.DemagnCnt = 0;
 360              		.loc 1 132 0
 361 0022 84F82550 		strb	r5, [r4, #37]
 133:BLDC/bldc.c   **** 
 134:BLDC/bldc.c   **** 	Bldc.MotorPhase = NextPhaseTable[Bldc.MotorRunDir][Bldc.MotorPhase];
 362              		.loc 1 134 0
 363 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 364 0028 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 365 002a 03EB4303 		add	r3, r3, r3, lsl #1
 366 002e 5A00     		lsls	r2, r3, #1
 367 0030 194B     		ldr	r3, .L27+12
 368 0032 1344     		add	r3, r3, r2
 369 0034 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
ARM GAS  /tmp/cc18IvJC.s 			page 10


 370 0036 A370     		strb	r3, [r4, #2]
 135:BLDC/bldc.c   **** 	
 136:BLDC/bldc.c   **** 	BLDC_UpdatePwmDuty(Bldc.PwmPulse);
 371              		.loc 1 136 0
 372 0038 E088     		ldrh	r0, [r4, #6]
 373 003a FFF7FEFF 		bl	BLDC_UpdatePwmDuty
 374              	.LVL9:
 137:BLDC/bldc.c   **** 	BLDC_CommPWM(Bldc.MotorPhase);
 375              		.loc 1 137 0
 376 003e A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 377 0040 FFF7FEFF 		bl	BLDC_CommPWM
 378              	.LVL10:
 138:BLDC/bldc.c   **** 	BLDC_StartPWM();
 379              		.loc 1 138 0
 380 0044 FFF7FEFF 		bl	BLDC_StartPWM
 381              	.LVL11:
 139:BLDC/bldc.c   **** 
 140:BLDC/bldc.c   **** 	BLDC_UpdateCommPeriod(Bldc.CommPeriod);
 382              		.loc 1 140 0
 383 0048 2089     		ldrh	r0, [r4, #8]
 384 004a FFF7FEFF 		bl	BLDC_UpdateCommPeriod
 385              	.LVL12:
 141:BLDC/bldc.c   **** 	BLDC_StartAutoComm();
 386              		.loc 1 141 0
 387 004e FFF7FEFF 		bl	BLDC_StartAutoComm
 388              	.LVL13:
 142:BLDC/bldc.c   **** 
 143:BLDC/bldc.c   **** 	ZCNT_TIM->CNT = 0;
 389              		.loc 1 143 0
 390 0052 124B     		ldr	r3, .L27+16
 391 0054 5D62     		str	r5, [r3, #36]
 144:BLDC/bldc.c   **** 	Bldc.FlagZeroCross = true;
 392              		.loc 1 144 0
 393 0056 0125     		movs	r5, #1
 394 0058 84F82650 		strb	r5, [r4, #38]
 145:BLDC/bldc.c   **** 
 146:BLDC/bldc.c   **** 	TIM1->SR &= ~TIM_FLAG_UPDATE;
 395              		.loc 1 146 0
 396 005c 03F59233 		add	r3, r3, #74752
 397 0060 1A69     		ldr	r2, [r3, #16]
 398 0062 22F00102 		bic	r2, r2, #1
 399 0066 1A61     		str	r2, [r3, #16]
 147:BLDC/bldc.c   **** 	TIM1->SR &= ~TIM_FLAG_CC4;
 400              		.loc 1 147 0
 401 0068 1A69     		ldr	r2, [r3, #16]
 402 006a 22F01002 		bic	r2, r2, #16
 403 006e 1A61     		str	r2, [r3, #16]
 148:BLDC/bldc.c   **** 	PWM_TIM->DIER |= TIM_FLAG_UPDATE;
 404              		.loc 1 148 0
 405 0070 DA68     		ldr	r2, [r3, #12]
 406 0072 2A43     		orrs	r2, r2, r5
 407 0074 DA60     		str	r2, [r3, #12]
 149:BLDC/bldc.c   **** 	PWM_TIM->DIER |= TIM_DIER_CC4IE;
 408              		.loc 1 149 0
 409 0076 DA68     		ldr	r2, [r3, #12]
 410 0078 42F01002 		orr	r2, r2, #16
 411 007c DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/cc18IvJC.s 			page 11


 150:BLDC/bldc.c   **** 
 151:BLDC/bldc.c   **** 	BLDC_StartAdc();
 412              		.loc 1 151 0
 413 007e FFF7FEFF 		bl	BLDC_StartAdc
 414              	.LVL14:
 152:BLDC/bldc.c   **** 
 153:BLDC/bldc.c   **** 	printf("Motor running ...\r\n");
 415              		.loc 1 153 0
 416 0082 0748     		ldr	r0, .L27+20
 417 0084 FFF7FEFF 		bl	puts
 418              	.LVL15:
 154:BLDC/bldc.c   **** 	return true;
 155:BLDC/bldc.c   **** }
 419              		.loc 1 155 0
 420 0088 2846     		mov	r0, r5
 421 008a 38BD     		pop	{r3, r4, r5, pc}
 422              	.L28:
 423              		.align	2
 424              	.L27:
 425 008c 00000000 		.word	.LC0
 426 0090 00000000 		.word	.LANCHOR5
 427 0094 00000000 		.word	Bldc
 428 0098 00000000 		.word	.LANCHOR3
 429 009c 00080040 		.word	1073743872
 430 00a0 14000000 		.word	.LC1
 431              		.cfi_endproc
 432              	.LFE69:
 434              		.section	.text.BLDC_TaskCallback,"ax",%progbits
 435              		.align	1
 436              		.global	BLDC_TaskCallback
 437              		.syntax unified
 438              		.thumb
 439              		.thumb_func
 440              		.fpu softvfp
 442              	BLDC_TaskCallback:
 443              	.LFB70:
 156:BLDC/bldc.c   **** 
 157:BLDC/bldc.c   **** #if defined (MOTOR_POLE_PAIRS)
 158:BLDC/bldc.c   **** uint32_t BLDC_GetMotorSpeed(void)
 159:BLDC/bldc.c   **** {
 160:BLDC/bldc.c   **** 	uint32_t freq, rpm = 0;
 161:BLDC/bldc.c   **** 
 162:BLDC/bldc.c   **** 	freq = (uint32_t)(SystemCoreClock / TIM2->PSC) / (Bldc.CommPeriod * 6);
 163:BLDC/bldc.c   **** 	rpm = (uint32_t)((freq * 60) / MOTOR_POLE_PAIRS);
 164:BLDC/bldc.c   **** 
 165:BLDC/bldc.c   **** 	return rpm;
 166:BLDC/bldc.c   **** }
 167:BLDC/bldc.c   **** #endif
 168:BLDC/bldc.c   **** 
 169:BLDC/bldc.c   **** void BLDC_TaskCallback(void)
 170:BLDC/bldc.c   **** {
 444              		.loc 1 170 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448 0000 10B5     		push	{r4, lr}
 449              	.LCFI3:
ARM GAS  /tmp/cc18IvJC.s 			page 12


 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 4, -8
 452              		.cfi_offset 14, -4
 171:BLDC/bldc.c   **** 	static uint16_t taskCnt = 0;
 172:BLDC/bldc.c   **** 	static uint8_t buttonCnt = 0;
 173:BLDC/bldc.c   **** 	
 174:BLDC/bldc.c   **** 	taskCnt++;
 453              		.loc 1 174 0
 454 0002 644A     		ldr	r2, .L49
 455 0004 1388     		ldrh	r3, [r2]
 456 0006 0133     		adds	r3, r3, #1
 457 0008 9BB2     		uxth	r3, r3
 458 000a 1380     		strh	r3, [r2]	@ movhi
 175:BLDC/bldc.c   **** 
 176:BLDC/bldc.c   **** 	if (Bldc.MotorStatus == MOTOR_STATUS_STOP)
 459              		.loc 1 176 0
 460 000c 624A     		ldr	r2, .L49+4
 461 000e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 462 0010 012A     		cmp	r2, #1
 463 0012 13D0     		beq	.L41
 177:BLDC/bldc.c   **** 	{
 178:BLDC/bldc.c   **** 		BLDC_StopPWM();
 179:BLDC/bldc.c   **** 		/* 禁止PWM更新中断 */
 180:BLDC/bldc.c   **** 		PWM_TIM->DIER &= ~0x01;
 181:BLDC/bldc.c   **** 		/* 禁止PWM CC4比较中断 */
 182:BLDC/bldc.c   **** 		PWM_TIM->DIER &= ~TIM_DIER_CC4IE;
 183:BLDC/bldc.c   **** 		/* 禁止换向中断 */
 184:BLDC/bldc.c   **** 		BLDC_StopAutoComm();
 185:BLDC/bldc.c   **** 		/* 禁止DMA中断 */
 186:BLDC/bldc.c   **** 		BLDC_StopAdc();
 187:BLDC/bldc.c   **** 
 188:BLDC/bldc.c   **** 		LED7_Off();
 189:BLDC/bldc.c   **** 		LED8_Off();
 190:BLDC/bldc.c   **** 		LED9_Off();
 191:BLDC/bldc.c   **** 		Bldc.MotorStatus = MOTOR_STATUS_IDLE;
 192:BLDC/bldc.c   **** 	}
 193:BLDC/bldc.c   **** 	else if (Bldc.MotorStatus == MOTOR_STATUS_START)
 464              		.loc 1 193 0
 465 0014 022A     		cmp	r2, #2
 466 0016 2ED0     		beq	.L42
 194:BLDC/bldc.c   **** 	{
 195:BLDC/bldc.c   **** 		if (taskCnt > 500) Bldc.MotorStatus = MOTOR_STATUS_RUNNING;
 196:BLDC/bldc.c   **** 	}
 197:BLDC/bldc.c   **** 	else if (Bldc.MotorStatus == MOTOR_STATUS_RESTART)
 467              		.loc 1 197 0
 468 0018 032A     		cmp	r2, #3
 469 001a 33D0     		beq	.L43
 198:BLDC/bldc.c   **** 	{
 199:BLDC/bldc.c   **** 		//printf("Motor restart ...\r\n");
 200:BLDC/bldc.c   **** 		if (Bldc.PwmPulse < PWM_TIM_PERIOD / 3) Bldc.PwmPulse += PWM_TIM_PERIOD/20;
 201:BLDC/bldc.c   **** 		Bldc.MotorStatus = MOTOR_STATUS_START;
 202:BLDC/bldc.c   **** 		BLDC_StartUp();
 203:BLDC/bldc.c   **** 	}
 204:BLDC/bldc.c   **** 	else if (Bldc.MotorStatus == MOTOR_STATUS_RUNNING)
 470              		.loc 1 204 0
 471 001c 042A     		cmp	r2, #4
 472 001e 4DD0     		beq	.L44
ARM GAS  /tmp/cc18IvJC.s 			page 13


 473              	.L31:
 205:BLDC/bldc.c   **** 	{
 206:BLDC/bldc.c   **** 		//if (Bldc.PwmPulse > (uint32_t)(MOTOR_START_PWM_DUTY * PWM_TIM_PERIOD) / 100) Bldc.PwmPulse -= P
 207:BLDC/bldc.c   **** 		//BLDC_UpdatePwmDuty(Bldc.PwmPulse);
 208:BLDC/bldc.c   **** 
 209:BLDC/bldc.c   **** 		Bldc.SpeedSet = Bldc.AdcBuffer[3];
 210:BLDC/bldc.c   **** 		Bldc.SpeedSet = ((uint32_t)Bldc.SpeedSet * 100) / 4095;
 211:BLDC/bldc.c   **** 		if (Bldc.SpeedSet > MOTOR_START_PWM_DUTY)
 212:BLDC/bldc.c   **** 		{
 213:BLDC/bldc.c   **** 			Bldc.PwmPulse = ((uint32_t)Bldc.SpeedSet * PWM_TIM_PERIOD) / 100;
 214:BLDC/bldc.c   **** 			BLDC_UpdatePwmDuty(Bldc.PwmPulse);
 215:BLDC/bldc.c   **** 		}
 216:BLDC/bldc.c   **** 
 217:BLDC/bldc.c   **** 		if (taskCnt % 1000 == 0)
 218:BLDC/bldc.c   **** 		{
 219:BLDC/bldc.c   **** 			printf("SpeedSet = %d\r\n",Bldc.AdcBuffer[3]);
 220:BLDC/bldc.c   **** 		}
 221:BLDC/bldc.c   **** 	}
 222:BLDC/bldc.c   **** 
 223:BLDC/bldc.c   **** 	if (taskCnt % 10 == 0)
 474              		.loc 1 223 0
 475 0020 5C4B     		ldr	r3, .L49
 476 0022 1A88     		ldrh	r2, [r3]
 477 0024 5D4B     		ldr	r3, .L49+8
 478 0026 A3FB0213 		umull	r1, r3, r3, r2
 479 002a DB08     		lsrs	r3, r3, #3
 480 002c 03EB8303 		add	r3, r3, r3, lsl #2
 481 0030 5900     		lsls	r1, r3, #1
 482 0032 521A     		subs	r2, r2, r1
 483 0034 92B2     		uxth	r2, r2
 484 0036 002A     		cmp	r2, #0
 485 0038 75D0     		beq	.L45
 486              	.L29:
 224:BLDC/bldc.c   **** 	{
 225:BLDC/bldc.c   **** 		if (Button_IsPush() == true)
 226:BLDC/bldc.c   **** 		{
 227:BLDC/bldc.c   **** 			buttonCnt++;
 228:BLDC/bldc.c   **** 		}
 229:BLDC/bldc.c   **** 		else
 230:BLDC/bldc.c   **** 		{
 231:BLDC/bldc.c   **** 			if (buttonCnt > 5)
 232:BLDC/bldc.c   **** 			{
 233:BLDC/bldc.c   **** 				buttonCnt = 0;
 234:BLDC/bldc.c   **** 				if (Bldc.MotorStatus == MOTOR_STATUS_IDLE)
 235:BLDC/bldc.c   **** 				{
 236:BLDC/bldc.c   **** 					Bldc.MotorStatus = MOTOR_STATUS_START;
 237:BLDC/bldc.c   **** 					Bldc.MotorRunDir = MOTOR_RUNNING_CCW;
 238:BLDC/bldc.c   **** 					Bldc.MotorPhase = MOTOR_PHASE_0;
 239:BLDC/bldc.c   **** 					Bldc.PwmPulse = (uint32_t)(MOTOR_START_PWM_DUTY * PWM_TIM_PERIOD) / 100;
 240:BLDC/bldc.c   **** 					BLDC_StartUp();
 241:BLDC/bldc.c   **** 					taskCnt = 0;
 242:BLDC/bldc.c   **** 				}
 243:BLDC/bldc.c   **** 				else if ((Bldc.MotorStatus == MOTOR_STATUS_RUNNING) || (Bldc.MotorStatus == MOTOR_STATUS_START)
 244:BLDC/bldc.c   **** 				{
 245:BLDC/bldc.c   **** 					Bldc.MotorStatus = MOTOR_STATUS_STOP;
 246:BLDC/bldc.c   **** 				}
 247:BLDC/bldc.c   **** 			}
ARM GAS  /tmp/cc18IvJC.s 			page 14


 248:BLDC/bldc.c   **** 		}
 249:BLDC/bldc.c   **** 	}
 250:BLDC/bldc.c   **** }
 487              		.loc 1 250 0
 488 003a 10BD     		pop	{r4, pc}
 489              	.L41:
 178:BLDC/bldc.c   **** 		/* 禁止PWM更新中断 */
 490              		.loc 1 178 0
 491 003c FFF7FEFF 		bl	BLDC_StopPWM
 492              	.LVL16:
 180:BLDC/bldc.c   **** 		/* 禁止PWM CC4比较中断 */
 493              		.loc 1 180 0
 494 0040 574B     		ldr	r3, .L49+12
 495 0042 DA68     		ldr	r2, [r3, #12]
 496 0044 22F00102 		bic	r2, r2, #1
 497 0048 DA60     		str	r2, [r3, #12]
 182:BLDC/bldc.c   **** 		/* 禁止换向中断 */
 498              		.loc 1 182 0
 499 004a DA68     		ldr	r2, [r3, #12]
 500 004c 22F01002 		bic	r2, r2, #16
 501 0050 DA60     		str	r2, [r3, #12]
 184:BLDC/bldc.c   **** 		/* 禁止DMA中断 */
 502              		.loc 1 184 0
 503 0052 FFF7FEFF 		bl	BLDC_StopAutoComm
 504              	.LVL17:
 186:BLDC/bldc.c   **** 
 505              		.loc 1 186 0
 506 0056 FFF7FEFF 		bl	BLDC_StopAdc
 507              	.LVL18:
 188:BLDC/bldc.c   **** 		LED8_Off();
 508              		.loc 1 188 0
 509 005a 524B     		ldr	r3, .L49+16
 510 005c 4FF40022 		mov	r2, #524288
 511 0060 1A61     		str	r2, [r3, #16]
 189:BLDC/bldc.c   **** 		LED9_Off();
 512              		.loc 1 189 0
 513 0062 4FF48012 		mov	r2, #1048576
 514 0066 1A61     		str	r2, [r3, #16]
 190:BLDC/bldc.c   **** 		Bldc.MotorStatus = MOTOR_STATUS_IDLE;
 515              		.loc 1 190 0
 516 0068 4FF40012 		mov	r2, #2097152
 517 006c 1A61     		str	r2, [r3, #16]
 191:BLDC/bldc.c   **** 	}
 518              		.loc 1 191 0
 519 006e 4A4B     		ldr	r3, .L49+4
 520 0070 0022     		movs	r2, #0
 521 0072 1A70     		strb	r2, [r3]
 522 0074 D4E7     		b	.L31
 523              	.L42:
 195:BLDC/bldc.c   **** 	}
 524              		.loc 1 195 0
 525 0076 B3F5FA7F 		cmp	r3, #500
 526 007a D1D9     		bls	.L31
 195:BLDC/bldc.c   **** 	}
 527              		.loc 1 195 0 is_stmt 0 discriminator 1
 528 007c 464B     		ldr	r3, .L49+4
 529 007e 0422     		movs	r2, #4
ARM GAS  /tmp/cc18IvJC.s 			page 15


 530 0080 1A70     		strb	r2, [r3]
 531 0082 CDE7     		b	.L31
 532              	.L43:
 200:BLDC/bldc.c   **** 		Bldc.MotorStatus = MOTOR_STATUS_START;
 533              		.loc 1 200 0 is_stmt 1
 534 0084 444B     		ldr	r3, .L49+4
 535 0086 D988     		ldrh	r1, [r3, #6]
 536 0088 474B     		ldr	r3, .L49+20
 537 008a 1B68     		ldr	r3, [r3]
 538 008c 474A     		ldr	r2, .L49+24
 539 008e A2FB0323 		umull	r2, r3, r2, r3
 540 0092 9B0B     		lsrs	r3, r3, #14
 541 0094 013B     		subs	r3, r3, #1
 542 0096 464A     		ldr	r2, .L49+28
 543 0098 A2FB0302 		umull	r0, r2, r2, r3
 544 009c B1EB520F 		cmp	r1, r2, lsr #1
 545 00a0 06D2     		bcs	.L34
 200:BLDC/bldc.c   **** 		Bldc.MotorStatus = MOTOR_STATUS_START;
 546              		.loc 1 200 0 is_stmt 0 discriminator 1
 547 00a2 3E4A     		ldr	r2, .L49+8
 548 00a4 A2FB0323 		umull	r2, r3, r2, r3
 549 00a8 01EB1313 		add	r3, r1, r3, lsr #4
 550 00ac 3A4A     		ldr	r2, .L49+4
 551 00ae D380     		strh	r3, [r2, #6]	@ movhi
 552              	.L34:
 201:BLDC/bldc.c   **** 		BLDC_StartUp();
 553              		.loc 1 201 0 is_stmt 1
 554 00b0 394B     		ldr	r3, .L49+4
 555 00b2 0222     		movs	r2, #2
 556 00b4 1A70     		strb	r2, [r3]
 202:BLDC/bldc.c   **** 	}
 557              		.loc 1 202 0
 558 00b6 FFF7FEFF 		bl	BLDC_StartUp
 559              	.LVL19:
 560 00ba B1E7     		b	.L31
 561              	.L44:
 209:BLDC/bldc.c   **** 		Bldc.SpeedSet = ((uint32_t)Bldc.SpeedSet * 100) / 4095;
 562              		.loc 1 209 0
 563 00bc 3649     		ldr	r1, .L49+4
 564 00be 0B8A     		ldrh	r3, [r1, #16]
 210:BLDC/bldc.c   **** 		if (Bldc.SpeedSet > MOTOR_START_PWM_DUTY)
 565              		.loc 1 210 0
 566 00c0 6422     		movs	r2, #100
 567 00c2 02FB03F2 		mul	r2, r2, r3
 568 00c6 3B4B     		ldr	r3, .L49+32
 569 00c8 A3FB0203 		umull	r0, r3, r3, r2
 570 00cc D21A     		subs	r2, r2, r3
 571 00ce 03EB5203 		add	r3, r3, r2, lsr #1
 572 00d2 C3F3CF23 		ubfx	r3, r3, #11, #16
 573 00d6 8B80     		strh	r3, [r1, #4]	@ movhi
 211:BLDC/bldc.c   **** 		{
 574              		.loc 1 211 0
 575 00d8 192B     		cmp	r3, #25
 576 00da 12D8     		bhi	.L46
 577              	.L35:
 217:BLDC/bldc.c   **** 		{
 578              		.loc 1 217 0
ARM GAS  /tmp/cc18IvJC.s 			page 16


 579 00dc 2D4B     		ldr	r3, .L49
 580 00de 1A88     		ldrh	r2, [r3]
 581 00e0 354B     		ldr	r3, .L49+36
 582 00e2 A3FB0213 		umull	r1, r3, r3, r2
 583 00e6 9B09     		lsrs	r3, r3, #6
 584 00e8 4FF47A71 		mov	r1, #1000
 585 00ec 01FB1323 		mls	r3, r1, r3, r2
 586 00f0 9BB2     		uxth	r3, r3
 587 00f2 002B     		cmp	r3, #0
 588 00f4 94D1     		bne	.L31
 219:BLDC/bldc.c   **** 		}
 589              		.loc 1 219 0
 590 00f6 284B     		ldr	r3, .L49+4
 591 00f8 198A     		ldrh	r1, [r3, #16]
 592 00fa 3048     		ldr	r0, .L49+40
 593 00fc FFF7FEFF 		bl	printf
 594              	.LVL20:
 595 0100 8EE7     		b	.L31
 596              	.L46:
 213:BLDC/bldc.c   **** 			BLDC_UpdatePwmDuty(Bldc.PwmPulse);
 597              		.loc 1 213 0
 598 0102 294A     		ldr	r2, .L49+20
 599 0104 1068     		ldr	r0, [r2]
 600 0106 294A     		ldr	r2, .L49+24
 601 0108 A2FB0020 		umull	r2, r0, r2, r0
 602 010c 800B     		lsrs	r0, r0, #14
 603 010e 0138     		subs	r0, r0, #1
 604 0110 00FB03F0 		mul	r0, r0, r3
 605 0114 2A4B     		ldr	r3, .L49+44
 606 0116 A3FB0030 		umull	r3, r0, r3, r0
 607 011a C0F34F10 		ubfx	r0, r0, #5, #16
 608 011e C880     		strh	r0, [r1, #6]	@ movhi
 214:BLDC/bldc.c   **** 		}
 609              		.loc 1 214 0
 610 0120 FFF7FEFF 		bl	BLDC_UpdatePwmDuty
 611              	.LVL21:
 612 0124 DAE7     		b	.L35
 613              	.L45:
 225:BLDC/bldc.c   **** 		{
 614              		.loc 1 225 0
 615 0126 FFF7FEFF 		bl	Button_IsPush
 616              	.LVL22:
 617 012a 90B9     		cbnz	r0, .L47
 231:BLDC/bldc.c   **** 			{
 618              		.loc 1 231 0
 619 012c 254B     		ldr	r3, .L49+48
 620 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 621 0130 052B     		cmp	r3, #5
 622 0132 82D9     		bls	.L29
 233:BLDC/bldc.c   **** 				if (Bldc.MotorStatus == MOTOR_STATUS_IDLE)
 623              		.loc 1 233 0
 624 0134 234B     		ldr	r3, .L49+48
 625 0136 0022     		movs	r2, #0
 626 0138 1A70     		strb	r2, [r3]
 234:BLDC/bldc.c   **** 				{
 627              		.loc 1 234 0
 628 013a 174B     		ldr	r3, .L49+4
ARM GAS  /tmp/cc18IvJC.s 			page 17


 629 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 630 013e 6BB1     		cbz	r3, .L48
 243:BLDC/bldc.c   **** 				{
 631              		.loc 1 243 0
 632 0140 042B     		cmp	r3, #4
 633 0142 02D0     		beq	.L39
 243:BLDC/bldc.c   **** 				{
 634              		.loc 1 243 0 is_stmt 0 discriminator 1
 635 0144 022B     		cmp	r3, #2
 636 0146 7FF478AF 		bne	.L29
 637              	.L39:
 245:BLDC/bldc.c   **** 				}
 638              		.loc 1 245 0 is_stmt 1
 639 014a 134B     		ldr	r3, .L49+4
 640 014c 0122     		movs	r2, #1
 641 014e 1A70     		strb	r2, [r3]
 642              		.loc 1 250 0
 643 0150 73E7     		b	.L29
 644              	.L47:
 227:BLDC/bldc.c   **** 		}
 645              		.loc 1 227 0
 646 0152 1C4A     		ldr	r2, .L49+48
 647 0154 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 648 0156 0133     		adds	r3, r3, #1
 649 0158 1370     		strb	r3, [r2]
 650 015a 6EE7     		b	.L29
 651              	.L48:
 236:BLDC/bldc.c   **** 					Bldc.MotorRunDir = MOTOR_RUNNING_CCW;
 652              		.loc 1 236 0
 653 015c 0E4A     		ldr	r2, .L49+4
 654 015e 0223     		movs	r3, #2
 655 0160 1370     		strb	r3, [r2]
 237:BLDC/bldc.c   **** 					Bldc.MotorPhase = MOTOR_PHASE_0;
 656              		.loc 1 237 0
 657 0162 0123     		movs	r3, #1
 658 0164 5370     		strb	r3, [r2, #1]
 238:BLDC/bldc.c   **** 					Bldc.PwmPulse = (uint32_t)(MOTOR_START_PWM_DUTY * PWM_TIM_PERIOD) / 100;
 659              		.loc 1 238 0
 660 0166 0024     		movs	r4, #0
 661 0168 9470     		strb	r4, [r2, #2]
 239:BLDC/bldc.c   **** 					BLDC_StartUp();
 662              		.loc 1 239 0
 663 016a 0F4B     		ldr	r3, .L49+20
 664 016c 1B68     		ldr	r3, [r3]
 665 016e 0F49     		ldr	r1, .L49+24
 666 0170 A1FB0313 		umull	r1, r3, r1, r3
 667 0174 9B0B     		lsrs	r3, r3, #14
 668 0176 03EB8303 		add	r3, r3, r3, lsl #2
 669 017a 03EB8303 		add	r3, r3, r3, lsl #2
 670 017e 193B     		subs	r3, r3, #25
 671 0180 0F49     		ldr	r1, .L49+44
 672 0182 A1FB0313 		umull	r1, r3, r1, r3
 673 0186 5B09     		lsrs	r3, r3, #5
 674 0188 D380     		strh	r3, [r2, #6]	@ movhi
 240:BLDC/bldc.c   **** 					taskCnt = 0;
 675              		.loc 1 240 0
 676 018a FFF7FEFF 		bl	BLDC_StartUp
ARM GAS  /tmp/cc18IvJC.s 			page 18


 677              	.LVL23:
 241:BLDC/bldc.c   **** 				}
 678              		.loc 1 241 0
 679 018e 014B     		ldr	r3, .L49
 680 0190 1C80     		strh	r4, [r3]	@ movhi
 681 0192 52E7     		b	.L29
 682              	.L50:
 683              		.align	2
 684              	.L49:
 685 0194 00000000 		.word	.LANCHOR6
 686 0198 00000000 		.word	Bldc
 687 019c CDCCCCCC 		.word	-858993459
 688 01a0 002C0140 		.word	1073818624
 689 01a4 000C0140 		.word	1073810432
 690 01a8 00000000 		.word	SystemCoreClock
 691 01ac 5917B7D1 		.word	-776530087
 692 01b0 ABAAAAAA 		.word	-1431655765
 693 01b4 01011000 		.word	1048833
 694 01b8 D34D6210 		.word	274877907
 695 01bc 00000000 		.word	.LC2
 696 01c0 1F85EB51 		.word	1374389535
 697 01c4 00000000 		.word	.LANCHOR7
 698              		.cfi_endproc
 699              	.LFE70:
 701              		.global	RefAdcIndex
 702              		.global	BemfAdcIndexTable
 703              		.global	NextPhaseTable
 704              		.global	BemfDirTable
 705              		.comm	Bldc,40,4
 706              		.section	.bss.bRef,"aw",%nobits
 707              		.align	1
 708              		.set	.LANCHOR0,. + 0
 711              	bRef:
 712 0000 0000     		.space	2
 713              		.section	.bss.bemf,"aw",%nobits
 714              		.align	1
 717              	bemf:
 718 0000 0000     		.space	2
 719              		.section	.bss.buttonCnt.8290,"aw",%nobits
 720              		.set	.LANCHOR7,. + 0
 723              	buttonCnt.8290:
 724 0000 00       		.space	1
 725              		.section	.bss.n.8285,"aw",%nobits
 726              		.align	1
 727              		.set	.LANCHOR5,. + 0
 730              	n.8285:
 731 0000 0000     		.space	2
 732              		.section	.bss.taskCnt.8289,"aw",%nobits
 733              		.align	1
 734              		.set	.LANCHOR6,. + 0
 737              	taskCnt.8289:
 738 0000 0000     		.space	2
 739              		.section	.bss.zTime,"aw",%nobits
 740              		.align	2
 741              		.set	.LANCHOR4,. + 0
 744              	zTime:
 745 0000 00000000 		.space	4
ARM GAS  /tmp/cc18IvJC.s 			page 19


 746              		.section	.rodata.BLDC_StartUp.str1.4,"aMS",%progbits,1
 747              		.align	2
 748              	.LC0:
 749 0000 4D6F746F 		.ascii	"Motor startup ...\015\000"
 749      72207374 
 749      61727475 
 749      70202E2E 
 749      2E0D00
 750 0013 00       		.space	1
 751              	.LC1:
 752 0014 4D6F746F 		.ascii	"Motor running ...\015\000"
 752      72207275 
 752      6E6E696E 
 752      67202E2E 
 752      2E0D00
 753              		.section	.rodata.BLDC_TaskCallback.str1.4,"aMS",%progbits,1
 754              		.align	2
 755              	.LC2:
 756 0000 53706565 		.ascii	"SpeedSet = %d\015\012\000"
 756      64536574 
 756      203D2025 
 756      640D0A00 
 757              		.section	.rodata.BemfAdcIndexTable,"a",%progbits
 758              		.align	2
 759              		.set	.LANCHOR2,. + 0
 762              	BemfAdcIndexTable:
 763 0000 02       		.byte	2
 764 0001 01       		.byte	1
 765 0002 00       		.byte	0
 766 0003 02       		.byte	2
 767 0004 01       		.byte	1
 768 0005 00       		.byte	0
 769              		.section	.rodata.BemfDirTable,"a",%progbits
 770              		.align	2
 771              		.set	.LANCHOR1,. + 0
 774              	BemfDirTable:
 775 0000 01       		.byte	1
 776 0001 00       		.byte	0
 777 0002 01       		.byte	1
 778 0003 00       		.byte	0
 779 0004 01       		.byte	1
 780 0005 00       		.byte	0
 781 0006 00       		.byte	0
 782 0007 01       		.byte	1
 783 0008 00       		.byte	0
 784 0009 01       		.byte	1
 785 000a 00       		.byte	0
 786 000b 01       		.byte	1
 787              		.section	.rodata.NextPhaseTable,"a",%progbits
 788              		.align	2
 789              		.set	.LANCHOR3,. + 0
 792              	NextPhaseTable:
 793 0000 01       		.byte	1
 794 0001 02       		.byte	2
 795 0002 03       		.byte	3
 796 0003 04       		.byte	4
 797 0004 05       		.byte	5
ARM GAS  /tmp/cc18IvJC.s 			page 20


 798 0005 00       		.byte	0
 799 0006 05       		.byte	5
 800 0007 00       		.byte	0
 801 0008 01       		.byte	1
 802 0009 02       		.byte	2
 803 000a 03       		.byte	3
 804 000b 04       		.byte	4
 805              		.section	.rodata.RefAdcIndex,"a",%progbits
 808              	RefAdcIndex:
 809 0000 03       		.byte	3
 810              		.text
 811              	.Letext0:
 812              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 813              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 814              		.file 4 "BLDC/bldc.h"
 815              		.file 5 "Drivers/STM32Cube_FW_F1_V1.4.0/CMSIS/Include/core_cm3.h"
 816              		.file 6 "Drivers/STM32Cube_FW_F1_V1.4.0/CMSIS/Device/STM32F1xx/Include/system_stm32f1xx.h"
 817              		.file 7 "Drivers/STM32Cube_FW_F1_V1.4.0/CMSIS/Device/STM32F1xx/Include/stm32f103xb.h"
 818              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 819              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 820              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 821              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 822              		.file 12 "BLDC/pwm.h"
 823              		.file 13 "BLDC/comm.h"
 824              		.file 14 "BLDC/adc.h"
 825              		.file 15 "/usr/arm-none-eabi/include/stdio.h"
 826              		.file 16 "Drivers/STM32Cube_FW_F1_V1.4.0/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 827              		.file 17 "<built-in>"
ARM GAS  /tmp/cc18IvJC.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bldc.c
     /tmp/cc18IvJC.s:16     .text.BLDC_IsZeroCross:0000000000000000 $t
     /tmp/cc18IvJC.s:22     .text.BLDC_IsZeroCross:0000000000000000 BLDC_IsZeroCross
     /tmp/cc18IvJC.s:103    .text.BLDC_IsZeroCross:000000000000007c $d
                            *COM*:0000000000000028 Bldc
     /tmp/cc18IvJC.s:113    .text.BLDC_CommCallback:0000000000000000 $t
     /tmp/cc18IvJC.s:120    .text.BLDC_CommCallback:0000000000000000 BLDC_CommCallback
     /tmp/cc18IvJC.s:163    .text.BLDC_CommCallback:0000000000000034 $d
     /tmp/cc18IvJC.s:169    .text.BLDC_CheckZeroCrossCallback:0000000000000000 $t
     /tmp/cc18IvJC.s:176    .text.BLDC_CheckZeroCrossCallback:0000000000000000 BLDC_CheckZeroCrossCallback
     /tmp/cc18IvJC.s:313    .text.BLDC_CheckZeroCrossCallback:00000000000000cc $d
     /tmp/cc18IvJC.s:322    .text.BLDC_StartUp:0000000000000000 $t
     /tmp/cc18IvJC.s:329    .text.BLDC_StartUp:0000000000000000 BLDC_StartUp
     /tmp/cc18IvJC.s:425    .text.BLDC_StartUp:000000000000008c $d
     /tmp/cc18IvJC.s:435    .text.BLDC_TaskCallback:0000000000000000 $t
     /tmp/cc18IvJC.s:442    .text.BLDC_TaskCallback:0000000000000000 BLDC_TaskCallback
     /tmp/cc18IvJC.s:685    .text.BLDC_TaskCallback:0000000000000194 $d
     /tmp/cc18IvJC.s:808    .rodata.RefAdcIndex:0000000000000000 RefAdcIndex
     /tmp/cc18IvJC.s:762    .rodata.BemfAdcIndexTable:0000000000000000 BemfAdcIndexTable
     /tmp/cc18IvJC.s:792    .rodata.NextPhaseTable:0000000000000000 NextPhaseTable
     /tmp/cc18IvJC.s:774    .rodata.BemfDirTable:0000000000000000 BemfDirTable
     /tmp/cc18IvJC.s:707    .bss.bRef:0000000000000000 $d
     /tmp/cc18IvJC.s:711    .bss.bRef:0000000000000000 bRef
     /tmp/cc18IvJC.s:714    .bss.bemf:0000000000000000 $d
     /tmp/cc18IvJC.s:717    .bss.bemf:0000000000000000 bemf
     /tmp/cc18IvJC.s:723    .bss.buttonCnt.8290:0000000000000000 buttonCnt.8290
     /tmp/cc18IvJC.s:724    .bss.buttonCnt.8290:0000000000000000 $d
     /tmp/cc18IvJC.s:726    .bss.n.8285:0000000000000000 $d
     /tmp/cc18IvJC.s:730    .bss.n.8285:0000000000000000 n.8285
     /tmp/cc18IvJC.s:733    .bss.taskCnt.8289:0000000000000000 $d
     /tmp/cc18IvJC.s:737    .bss.taskCnt.8289:0000000000000000 taskCnt.8289
     /tmp/cc18IvJC.s:740    .bss.zTime:0000000000000000 $d
     /tmp/cc18IvJC.s:744    .bss.zTime:0000000000000000 zTime
     /tmp/cc18IvJC.s:747    .rodata.BLDC_StartUp.str1.4:0000000000000000 $d
     /tmp/cc18IvJC.s:754    .rodata.BLDC_TaskCallback.str1.4:0000000000000000 $d
     /tmp/cc18IvJC.s:758    .rodata.BemfAdcIndexTable:0000000000000000 $d
     /tmp/cc18IvJC.s:770    .rodata.BemfDirTable:0000000000000000 $d
     /tmp/cc18IvJC.s:788    .rodata.NextPhaseTable:0000000000000000 $d

UNDEFINED SYMBOLS
BLDC_CommPWM
BLDC_StopAutoComm
BLDC_StartAdc
BLDC_UpdateCommPeriod
BLDC_StartAutoComm
BLDC_StopAdc
HAL_GPIO_TogglePin
puts
BLDC_UpdatePwmDuty
BLDC_StartPWM
BLDC_StopPWM
printf
Button_IsPush
SystemCoreClock
